{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _this=this;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import React,{useRef}from'react';import View from\"react-native-web/dist/exports/View\";import{getWeekDates,sameMonth}from\"../dateutils\";import{parseDate,toMarkingFormat}from\"../interface\";import{getState}from\"../day-state-manager\";import{extractComponentProps}from\"../componentUpdater\";import styleConstructor from\"./style\";import Calendar from\"../calendar\";import Day from\"../calendar/day/index\";import{jsx as _jsx}from\"react/jsx-runtime\";var Week=function Week(props){var theme=props.theme,current=props.current,firstDay=props.firstDay,hideExtraDays=props.hideExtraDays,markedDates=props.markedDates,onDayPress=props.onDayPress,propsStyle=props.style;var style=useRef(styleConstructor(theme));var getWeek=function getWeek(date){if(date){return getWeekDates(date,firstDay);}};var renderDay=function renderDay(day,id){var dayProps=extractComponentProps(Day,props);var currXdate=parseDate(current);if(current&&hideExtraDays){if(!sameMonth(day,currXdate)){return _jsx(View,{style:style.current.emptyDayContainer},id);}}return _jsx(View,{style:style.current.dayContainer,children:_jsx(Day,_objectSpread(_objectSpread({},dayProps),{},{date:toMarkingFormat(day),state:getState(day,currXdate,props),marking:markedDates==null?void 0:markedDates[toMarkingFormat(day)],onPress:onDayPress,onLongPress:onDayPress}))},id);};var renderWeek=function renderWeek(){var dates=getWeek(current);var week=[];if(dates){dates.forEach(function(day,id){week.push(renderDay(day,id));},_this);}return week;};return _jsx(View,{style:style.current.container,children:_jsx(View,{style:[style.current.week,propsStyle],children:renderWeek()})});};export default Week;Week.displayName='Week';Week.propTypes=_objectSpread({},Calendar.propTypes);","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/node_modules/react-native-calendars/src/expandableCalendar/week.js"],"names":["React","useRef","getWeekDates","sameMonth","parseDate","toMarkingFormat","getState","extractComponentProps","styleConstructor","Calendar","Day","Week","props","theme","current","firstDay","hideExtraDays","markedDates","onDayPress","propsStyle","style","getWeek","date","renderDay","day","id","dayProps","currXdate","emptyDayContainer","dayContainer","renderWeek","dates","week","forEach","push","container","displayName","propTypes"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { View } from 'react-native';\nimport { getWeekDates, sameMonth } from '../dateutils';\nimport { parseDate, toMarkingFormat } from '../interface';\nimport { getState } from '../day-state-manager';\nimport { extractComponentProps } from '../componentUpdater';\nimport styleConstructor from './style';\nimport Calendar from '../calendar';\nimport Day from '../calendar/day/index';\nconst Week = (props) => {\n    const { theme, current, firstDay, hideExtraDays, markedDates, onDayPress, style: propsStyle } = props;\n    const style = useRef(styleConstructor(theme));\n    const getWeek = (date) => {\n        if (date) {\n            return getWeekDates(date, firstDay);\n        }\n    };\n    // renderWeekNumber (weekNumber) {\n    //   return <BasicDay key={`week-${weekNumber}`} theme={this.props.theme} marking={{disableTouchEvent: true}} state='disabled'>{weekNumber}</BasicDay>;\n    // }\n    const renderDay = (day, id) => {\n        const dayProps = extractComponentProps(Day, props);\n        const currXdate = parseDate(current);\n        // hide extra days\n        if (current && hideExtraDays) {\n            if (!sameMonth(day, currXdate)) {\n                return <View key={id} style={style.current.emptyDayContainer}/>;\n            }\n        }\n        return (<View style={style.current.dayContainer} key={id}>\n        <Day {...dayProps} date={toMarkingFormat(day)} state={getState(day, currXdate, props)} marking={markedDates?.[toMarkingFormat(day)]} onPress={onDayPress} onLongPress={onDayPress}/>\n      </View>);\n    };\n    const renderWeek = () => {\n        const dates = getWeek(current);\n        const week = [];\n        if (dates) {\n            dates.forEach((day, id) => {\n                week.push(renderDay(day, id));\n            }, this);\n        }\n        // if (this.props.showWeekNumbers) {\n        //   week.unshift(this.renderWeekNumber(item[item.length - 1].getWeek()));\n        // }\n        return week;\n    };\n    return (<View style={style.current.container}>\n      <View style={[style.current.week, propsStyle]}>{renderWeek()}</View>\n    </View>);\n};\nexport default Week;\nWeek.displayName = 'Week';\nWeek.propTypes = {\n    ...Calendar.propTypes\n};\n"]},"metadata":{},"sourceType":"module"}