{"ast":null,"code":"var XDate=require('xdate');export function padNumber(n){if(n<10){return'0'+n;}return n;}export function xdateToData(d){var dateString=toMarkingFormat(d);return{year:d.getFullYear(),month:d.getMonth()+1,day:d.getDate(),timestamp:new XDate(dateString,true).getTime(),dateString:dateString};}export function parseDate(d){if(!d){return;}else if(d.timestamp){return new XDate(d.timestamp,true);}else if(d instanceof XDate){return new XDate(toMarkingFormat(d),true);}else if(d.getTime){var dateString=d.getFullYear()+'-'+padNumber(d.getMonth()+1)+'-'+padNumber(d.getDate());return new XDate(dateString,true);}else if(d.year){var _dateString=d.year+'-'+padNumber(d.month)+'-'+padNumber(d.day);return new XDate(_dateString,true);}else if(d){return new XDate(d,true);}}export function toMarkingFormat(d){return d.toString('yyyy-MM-dd');}","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/node_modules/react-native-calendars/src/interface.js"],"names":["XDate","require","padNumber","n","xdateToData","d","dateString","toMarkingFormat","year","getFullYear","month","getMonth","day","getDate","timestamp","getTime","parseDate","toString"],"mappings":"AAAA,GAAMA,CAAAA,KAAK,CAAGC,OAAO,CAAC,OAAD,CAArB,CACA,MAAO,SAASC,CAAAA,SAAT,CAAmBC,CAAnB,CAAsB,CACzB,GAAIA,CAAC,CAAG,EAAR,CAAY,CACR,MAAO,IAAMA,CAAb,CACH,CACD,MAAOA,CAAAA,CAAP,CACH,CACD,MAAO,SAASC,CAAAA,WAAT,CAAqBC,CAArB,CAAwB,CAC3B,GAAMC,CAAAA,UAAU,CAAGC,eAAe,CAACF,CAAD,CAAlC,CACA,MAAO,CACHG,IAAI,CAAEH,CAAC,CAACI,WAAF,EADH,CAEHC,KAAK,CAAEL,CAAC,CAACM,QAAF,GAAe,CAFnB,CAGHC,GAAG,CAAEP,CAAC,CAACQ,OAAF,EAHF,CAIHC,SAAS,CAAE,GAAId,CAAAA,KAAJ,CAAUM,UAAV,CAAsB,IAAtB,EAA4BS,OAA5B,EAJR,CAKHT,UAAU,CAAEA,UALT,CAAP,CAOH,CACD,MAAO,SAASU,CAAAA,SAAT,CAAmBX,CAAnB,CAAsB,CACzB,GAAI,CAACA,CAAL,CAAQ,CACJ,OACH,CAFD,IAGK,IAAIA,CAAC,CAACS,SAAN,CAAiB,CAElB,MAAO,IAAId,CAAAA,KAAJ,CAAUK,CAAC,CAACS,SAAZ,CAAuB,IAAvB,CAAP,CACH,CAHI,IAIA,IAAIT,CAAC,WAAYL,CAAAA,KAAjB,CAAwB,CAEzB,MAAO,IAAIA,CAAAA,KAAJ,CAAUO,eAAe,CAACF,CAAD,CAAzB,CAA8B,IAA9B,CAAP,CACH,CAHI,IAIA,IAAIA,CAAC,CAACU,OAAN,CAAe,CAEhB,GAAMT,CAAAA,UAAU,CAAGD,CAAC,CAACI,WAAF,GAAkB,GAAlB,CAAwBP,SAAS,CAACG,CAAC,CAACM,QAAF,GAAe,CAAhB,CAAjC,CAAsD,GAAtD,CAA4DT,SAAS,CAACG,CAAC,CAACQ,OAAF,EAAD,CAAxF,CACA,MAAO,IAAIb,CAAAA,KAAJ,CAAUM,UAAV,CAAsB,IAAtB,CAAP,CACH,CAJI,IAKA,IAAID,CAAC,CAACG,IAAN,CAAY,CACb,GAAMF,CAAAA,WAAU,CAAGD,CAAC,CAACG,IAAF,CAAS,GAAT,CAAeN,SAAS,CAACG,CAAC,CAACK,KAAH,CAAxB,CAAoC,GAApC,CAA0CR,SAAS,CAACG,CAAC,CAACO,GAAH,CAAtE,CACA,MAAO,IAAIZ,CAAAA,KAAJ,CAAUM,WAAV,CAAsB,IAAtB,CAAP,CACH,CAHI,IAIA,IAAID,CAAJ,CAAO,CAER,MAAO,IAAIL,CAAAA,KAAJ,CAAUK,CAAV,CAAa,IAAb,CAAP,CACH,CACJ,CACD,MAAO,SAASE,CAAAA,eAAT,CAAyBF,CAAzB,CAA4B,CAC/B,MAAOA,CAAAA,CAAC,CAACY,QAAF,CAAW,YAAX,CAAP,CACH","sourcesContent":["const XDate = require('xdate');\nexport function padNumber(n) {\n    if (n < 10) {\n        return '0' + n;\n    }\n    return n;\n}\nexport function xdateToData(d) {\n    const dateString = toMarkingFormat(d);\n    return {\n        year: d.getFullYear(),\n        month: d.getMonth() + 1,\n        day: d.getDate(),\n        timestamp: new XDate(dateString, true).getTime(),\n        dateString: dateString\n    };\n}\nexport function parseDate(d) {\n    if (!d) {\n        return;\n    }\n    else if (d.timestamp) {\n        // conventional data timestamp\n        return new XDate(d.timestamp, true);\n    }\n    else if (d instanceof XDate) {\n        // xdate\n        return new XDate(toMarkingFormat(d), true);\n    }\n    else if (d.getTime) {\n        // javascript date\n        const dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n        return new XDate(dateString, true);\n    }\n    else if (d.year) {\n        const dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n        return new XDate(dateString, true);\n    }\n    else if (d) {\n        // timestamp number or date formatted as string\n        return new XDate(d, true);\n    }\n}\nexport function toMarkingFormat(d) {\n    return d.toString('yyyy-MM-dd');\n}\n"]},"metadata":{},"sourceType":"module"}