{"ast":null,"code":"var _require=require(\"./dateutils\"),isToday=_require.isToday,isDateNotInTheRange=_require.isDateNotInTheRange,sameMonth=_require.sameMonth;var _require2=require(\"./interface\"),parseDate=_require2.parseDate,toMarkingFormat=_require2.toMarkingFormat;export function getState(day,current,props){var minDate=props.minDate,maxDate=props.maxDate,disabledByDefault=props.disabledByDefault,context=props.context;var _minDate=parseDate(minDate);var _maxDate=parseDate(maxDate);var state='';if((context==null?void 0:context.date)===toMarkingFormat(day)){state='selected';}else if(isToday(day)){state='today';}if(disabledByDefault){state='disabled';}else if(isDateNotInTheRange(_minDate,_maxDate,day)){state='disabled';}else if(!sameMonth(day,current)){state='disabled';}return state;}","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/node_modules/react-native-calendars/src/day-state-manager.js"],"names":["require","isToday","isDateNotInTheRange","sameMonth","parseDate","toMarkingFormat","getState","day","current","props","minDate","maxDate","disabledByDefault","context","_minDate","_maxDate","state","date"],"mappings":"AAAA,aAAoDA,OAAO,eAA3D,CAAQC,OAAR,UAAQA,OAAR,CAAiBC,mBAAjB,UAAiBA,mBAAjB,CAAsCC,SAAtC,UAAsCA,SAAtC,CACA,cAAuCH,OAAO,eAA9C,CAAQI,SAAR,WAAQA,SAAR,CAAmBC,eAAnB,WAAmBA,eAAnB,CACA,MAAO,SAASC,CAAAA,QAAT,CAAkBC,GAAlB,CAAuBC,OAAvB,CAAgCC,KAAhC,CAAuC,CAC1C,GAAQC,CAAAA,OAAR,CAAyDD,KAAzD,CAAQC,OAAR,CAAiBC,OAAjB,CAAyDF,KAAzD,CAAiBE,OAAjB,CAA0BC,iBAA1B,CAAyDH,KAAzD,CAA0BG,iBAA1B,CAA6CC,OAA7C,CAAyDJ,KAAzD,CAA6CI,OAA7C,CACA,GAAMC,CAAAA,QAAQ,CAAGV,SAAS,CAACM,OAAD,CAA1B,CACA,GAAMK,CAAAA,QAAQ,CAAGX,SAAS,CAACO,OAAD,CAA1B,CACA,GAAIK,CAAAA,KAAK,CAAG,EAAZ,CACA,GAAI,CAAAH,OAAO,MAAP,QAAAA,OAAO,CAAEI,IAAT,IAAkBZ,eAAe,CAACE,GAAD,CAArC,CAA4C,CACxCS,KAAK,CAAG,UAAR,CACH,CAFD,IAGK,IAAIf,OAAO,CAACM,GAAD,CAAX,CAAkB,CACnBS,KAAK,CAAG,OAAR,CACH,CACD,GAAIJ,iBAAJ,CAAuB,CACnBI,KAAK,CAAG,UAAR,CACH,CAFD,IAGK,IAAId,mBAAmB,CAACY,QAAD,CAAWC,QAAX,CAAqBR,GAArB,CAAvB,CAAkD,CACnDS,KAAK,CAAG,UAAR,CACH,CAFI,IAGA,IAAI,CAACb,SAAS,CAACI,GAAD,CAAMC,OAAN,CAAd,CAA8B,CAC/BQ,KAAK,CAAG,UAAR,CACH,CACD,MAAOA,CAAAA,KAAP,CACH","sourcesContent":["const { isToday, isDateNotInTheRange, sameMonth } = require('./dateutils');\nconst { parseDate, toMarkingFormat } = require('./interface');\nexport function getState(day, current, props) {\n    const { minDate, maxDate, disabledByDefault, context } = props;\n    const _minDate = parseDate(minDate);\n    const _maxDate = parseDate(maxDate);\n    let state = '';\n    if (context?.date === toMarkingFormat(day)) {\n        state = 'selected';\n    }\n    else if (isToday(day)) {\n        state = 'today';\n    }\n    if (disabledByDefault) {\n        state = 'disabled';\n    }\n    else if (isDateNotInTheRange(_minDate, _maxDate, day)) {\n        state = 'disabled';\n    }\n    else if (!sameMonth(day, current)) {\n        state = 'disabled';\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}