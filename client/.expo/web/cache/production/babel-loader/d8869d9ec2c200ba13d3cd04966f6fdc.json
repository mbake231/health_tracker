{"ast":null,"code":"import React,{useCallback,useMemo}from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import XDate from'xdate';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TEXT_LINE_HEIGHT=17;var EventBlock=function EventBlock(props){var index=props.index,event=props.event,renderEvent=props.renderEvent,onPress=props.onPress,format24h=props.format24h,styles=props.styles;var numberOfLines=Math.floor(event.height/TEXT_LINE_HEIGHT);var formatTime=format24h?'HH:mm':'hh:mm A';var eventStyle=useMemo(function(){return{left:event.left,height:event.height,width:event.width,top:event.top,backgroundColor:event.color?event.color:'#add8e6'};},[event]);var _onPress=useCallback(function(){onPress(index);},[index,onPress]);return _jsx(TouchableOpacity,{activeOpacity:0.9,onPress:_onPress,style:[styles.event,eventStyle],children:renderEvent?renderEvent(event):_jsxs(View,{children:[_jsx(Text,{numberOfLines:1,style:styles.eventTitle,children:event.title||'Event'}),numberOfLines>1?_jsx(Text,{numberOfLines:numberOfLines-1,style:[styles.eventSummary],children:event.summary||' '}):null,numberOfLines>2?_jsxs(Text,{style:styles.eventTimes,numberOfLines:1,children:[new XDate(event.start).toString(formatTime),\" - \",new XDate(event.end).toString(formatTime)]}):null]})});};export default EventBlock;","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/node_modules/react-native-calendars/src/timeline/EventBlock.js"],"names":["React","useCallback","useMemo","XDate","TEXT_LINE_HEIGHT","EventBlock","props","index","event","renderEvent","onPress","format24h","styles","numberOfLines","Math","floor","height","formatTime","eventStyle","left","width","top","backgroundColor","color","_onPress","eventTitle","title","eventSummary","summary","eventTimes","start","toString","end"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,OAA7B,KAA4C,OAA5C,C,uLAEA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,wFACA,GAAMC,CAAAA,gBAAgB,CAAG,EAAzB,CACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAC1B,GAAQC,CAAAA,KAAR,CAAkED,KAAlE,CAAQC,KAAR,CAAeC,KAAf,CAAkEF,KAAlE,CAAeE,KAAf,CAAsBC,WAAtB,CAAkEH,KAAlE,CAAsBG,WAAtB,CAAmCC,OAAnC,CAAkEJ,KAAlE,CAAmCI,OAAnC,CAA4CC,SAA5C,CAAkEL,KAAlE,CAA4CK,SAA5C,CAAuDC,MAAvD,CAAkEN,KAAlE,CAAuDM,MAAvD,CAGA,GAAMC,CAAAA,aAAa,CAAGC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACQ,MAAN,CAAeZ,gBAA1B,CAAtB,CACA,GAAMa,CAAAA,UAAU,CAAGN,SAAS,CAAG,OAAH,CAAa,SAAzC,CACA,GAAMO,CAAAA,UAAU,CAAGhB,OAAO,CAAC,UAAM,CAC7B,MAAO,CACHiB,IAAI,CAAEX,KAAK,CAACW,IADT,CAEHH,MAAM,CAAER,KAAK,CAACQ,MAFX,CAGHI,KAAK,CAAEZ,KAAK,CAACY,KAHV,CAIHC,GAAG,CAAEb,KAAK,CAACa,GAJR,CAKHC,eAAe,CAAEd,KAAK,CAACe,KAAN,CAAcf,KAAK,CAACe,KAApB,CAA4B,SAL1C,CAAP,CAOH,CARyB,CAQvB,CAACf,KAAD,CARuB,CAA1B,CASA,GAAMgB,CAAAA,QAAQ,CAAGvB,WAAW,CAAC,UAAM,CAC/BS,OAAO,CAACH,KAAD,CAAP,CACH,CAF2B,CAEzB,CAACA,KAAD,CAAQG,OAAR,CAFyB,CAA5B,CAGA,MAAQ,MAAC,gBAAD,EAAkB,aAAa,CAAE,GAAjC,CAAsC,OAAO,CAAEc,QAA/C,CAAyD,KAAK,CAAE,CAACZ,MAAM,CAACJ,KAAR,CAAeU,UAAf,CAAhE,UACLT,WAAW,CAAIA,WAAW,CAACD,KAAD,CAAf,CAA2B,MAAC,IAAD,YACnC,KAAC,IAAD,EAAM,aAAa,CAAE,CAArB,CAAwB,KAAK,CAAEI,MAAM,CAACa,UAAtC,UACGjB,KAAK,CAACkB,KAAN,EAAe,OADlB,EADmC,CAIlCb,aAAa,CAAG,CAAhB,CAAqB,KAAC,IAAD,EAAM,aAAa,CAAEA,aAAa,CAAG,CAArC,CAAwC,KAAK,CAAE,CAACD,MAAM,CAACe,YAAR,CAA/C,UACjBnB,KAAK,CAACoB,OAAN,EAAiB,GADA,EAArB,CAEY,IANsB,CAOlCf,aAAa,CAAG,CAAhB,CAAqB,MAAC,IAAD,EAAM,KAAK,CAAED,MAAM,CAACiB,UAApB,CAAgC,aAAa,CAAE,CAA/C,WACjB,GAAI1B,CAAAA,KAAJ,CAAUK,KAAK,CAACsB,KAAhB,EAAuBC,QAAvB,CAAgCd,UAAhC,CADiB,OAC+B,GAAId,CAAAA,KAAJ,CAAUK,KAAK,CAACwB,GAAhB,EAAqBD,QAArB,CAA8Bd,UAA9B,CAD/B,GAArB,CAEY,IATsB,GADjC,EAAR,CAaH,CA/BD,CAgCA,cAAeZ,CAAAA,UAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport XDate from 'xdate';\nconst TEXT_LINE_HEIGHT = 17;\nconst EventBlock = (props) => {\n    const { index, event, renderEvent, onPress, format24h, styles } = props;\n    // Fixing the number of lines for the event title makes this calculation easier.\n    // However it would make sense to overflow the title to a new line if needed\n    const numberOfLines = Math.floor(event.height / TEXT_LINE_HEIGHT);\n    const formatTime = format24h ? 'HH:mm' : 'hh:mm A';\n    const eventStyle = useMemo(() => {\n        return {\n            left: event.left,\n            height: event.height,\n            width: event.width,\n            top: event.top,\n            backgroundColor: event.color ? event.color : '#add8e6'\n        };\n    }, [event]);\n    const _onPress = useCallback(() => {\n        onPress(index);\n    }, [index, onPress]);\n    return (<TouchableOpacity activeOpacity={0.9} onPress={_onPress} style={[styles.event, eventStyle]}>\n      {renderEvent ? (renderEvent(event)) : (<View>\n          <Text numberOfLines={1} style={styles.eventTitle}>\n            {event.title || 'Event'}\n          </Text>\n          {numberOfLines > 1 ? (<Text numberOfLines={numberOfLines - 1} style={[styles.eventSummary]}>\n              {event.summary || ' '}\n            </Text>) : null}\n          {numberOfLines > 2 ? (<Text style={styles.eventTimes} numberOfLines={1}>\n              {new XDate(event.start).toString(formatTime)} - {new XDate(event.end).toString(formatTime)}\n            </Text>) : null}\n        </View>)}\n    </TouchableOpacity>);\n};\nexport default EventBlock;\n"]},"metadata":{},"sourceType":"module"}