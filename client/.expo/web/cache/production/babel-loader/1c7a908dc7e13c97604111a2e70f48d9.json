{"ast":null,"code":"var XDate=require('xdate');var _require=require(\"./interface\"),parseDate=_require.parseDate,toMarkingFormat=_require.toMarkingFormat;var _require2=require(\"./services\"),getDefaultLocale=_require2.getDefaultLocale;var latinNumbersPattern=/[0-9]/g;function isValidXDate(date){return date&&date instanceof XDate;}export function sameMonth(a,b){if(!isValidXDate(a)||!isValidXDate(b)){return false;}else{return(a==null?void 0:a.getFullYear())===(b==null?void 0:b.getFullYear())&&(a==null?void 0:a.getMonth())===(b==null?void 0:b.getMonth());}}export function sameDate(a,b){if(!isValidXDate(a)||!isValidXDate(b)){return false;}else{return(a==null?void 0:a.getFullYear())===(b==null?void 0:b.getFullYear())&&(a==null?void 0:a.getMonth())===(b==null?void 0:b.getMonth())&&(a==null?void 0:a.getDate())===(b==null?void 0:b.getDate());}}export function sameWeek(a,b,firstDayOfWeek){var weekDates=getWeekDates(a,firstDayOfWeek,'yyyy-MM-dd');return weekDates==null?void 0:weekDates.includes(b);}export function isPastDate(date){var today=new XDate();var d=new XDate(date);if(today.getFullYear()>d.getFullYear()){return true;}if(today.getFullYear()===d.getFullYear()){if(today.getMonth()>d.getMonth()){return true;}if(today.getMonth()===d.getMonth()){if(today.getDate()>d.getDate()){return true;}}}return false;}export function isToday(date){return sameDate(date,XDate.today());}export function isGTE(a,b){return b.diffDays(a)>-1;}export function isLTE(a,b){return a.diffDays(b)>-1;}export function formatNumbers(date){var numbers=getDefaultLocale().numbers;return numbers?date.toString().replace(latinNumbersPattern,function(char){return numbers[+char];}):date;}export function fromTo(a,b){var days=[];var from=+a;var to=+b;for(;from<=to;from=new XDate(from,true).addDays(1).getTime()){days.push(new XDate(from,true));}return days;}export function month(date){var year=date.getFullYear(),month=date.getMonth();var days=new XDate(year,month+1,0).getDate();var firstDay=new XDate(year,month,1,0,0,0,true);var lastDay=new XDate(year,month,days,0,0,0,true);return fromTo(firstDay,lastDay);}export function weekDayNames(){var firstDayOfWeek=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var weekDaysNames=getDefaultLocale().dayNamesShort;var dayShift=firstDayOfWeek%7;if(dayShift){weekDaysNames=weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0,dayShift));}return weekDaysNames;}export function page(date){var firstDayOfWeek=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var showSixWeeks=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var days=month(date);var before=[];var after=[];var fdow=(7+firstDayOfWeek)%7||7;var ldow=(fdow+6)%7;firstDayOfWeek=firstDayOfWeek||0;var from=days[0].clone();var daysBefore=from.getDay();if(from.getDay()!==fdow){from.addDays(-(from.getDay()+7-fdow)%7);}var to=days[days.length-1].clone();var day=to.getDay();if(day!==ldow){to.addDays((ldow+7-day)%7);}var daysForSixWeeks=(daysBefore+days.length)/6>=6;if(showSixWeeks&&!daysForSixWeeks){to.addDays(7);}if(isLTE(from,days[0])){before=fromTo(from,days[0]);}if(isGTE(to,days[days.length-1])){after=fromTo(days[days.length-1],to);}return before.concat(days.slice(1,days.length-1),after);}export function isDateNotInTheRange(minDate,maxDate,date){return minDate&&!isGTE(date,minDate)||maxDate&&!isLTE(date,maxDate);}export function getWeekDates(date){var firstDay=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var format=arguments.length>2?arguments[2]:undefined;if(date&&parseDate(date).valid()){var current=parseDate(date);var daysArray=[current];var dayOfTheWeek=current.getDay()-firstDay;if(dayOfTheWeek<0){dayOfTheWeek=7+dayOfTheWeek;}var newDate=current;var index=dayOfTheWeek-1;while(index>=0){newDate=parseDate(newDate).addDays(-1);daysArray.unshift(newDate);index-=1;}newDate=current;index=dayOfTheWeek+1;while(index<7){newDate=parseDate(newDate).addDays(1);daysArray.push(newDate);index+=1;}if(format){return daysArray.map(function(d){return d.toString(format);});}return daysArray;}}export function generateDay(originDate){var daysOffset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var baseDate=new XDate(originDate);return toMarkingFormat(baseDate.clone().addDays(daysOffset));}","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/node_modules/react-native-calendars/src/dateutils.js"],"names":["XDate","require","parseDate","toMarkingFormat","getDefaultLocale","latinNumbersPattern","isValidXDate","date","sameMonth","a","b","getFullYear","getMonth","sameDate","getDate","sameWeek","firstDayOfWeek","weekDates","getWeekDates","includes","isPastDate","today","d","isToday","isGTE","diffDays","isLTE","formatNumbers","numbers","toString","replace","char","fromTo","days","from","to","addDays","getTime","push","month","year","firstDay","lastDay","weekDayNames","weekDaysNames","dayNamesShort","dayShift","slice","concat","page","showSixWeeks","before","after","fdow","ldow","clone","daysBefore","getDay","length","day","daysForSixWeeks","isDateNotInTheRange","minDate","maxDate","format","valid","current","daysArray","dayOfTheWeek","newDate","index","unshift","map","generateDay","originDate","daysOffset","baseDate"],"mappings":"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","sourcesContent":["const XDate = require('xdate');\nconst { parseDate, toMarkingFormat } = require('./interface');\nconst { getDefaultLocale } = require('./services');\nconst latinNumbersPattern = /[0-9]/g;\nfunction isValidXDate(date) {\n    return date && (date instanceof XDate);\n}\nexport function sameMonth(a, b) {\n    if (!isValidXDate(a) || !isValidXDate(b)) {\n        return false;\n    }\n    else {\n        return a?.getFullYear() === b?.getFullYear() && a?.getMonth() === b?.getMonth();\n    }\n}\nexport function sameDate(a, b) {\n    if (!isValidXDate(a) || !isValidXDate(b)) {\n        return false;\n    }\n    else {\n        return a?.getFullYear() === b?.getFullYear() && a?.getMonth() === b?.getMonth() && a?.getDate() === b?.getDate();\n    }\n}\nexport function sameWeek(a, b, firstDayOfWeek) {\n    const weekDates = getWeekDates(a, firstDayOfWeek, 'yyyy-MM-dd');\n    return weekDates?.includes(b);\n}\nexport function isPastDate(date) {\n    const today = new XDate();\n    const d = new XDate(date);\n    if (today.getFullYear() > d.getFullYear()) {\n        return true;\n    }\n    if (today.getFullYear() === d.getFullYear()) {\n        if (today.getMonth() > d.getMonth()) {\n            return true;\n        }\n        if (today.getMonth() === d.getMonth()) {\n            if (today.getDate() > d.getDate()) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function isToday(date) {\n    return sameDate(date, XDate.today());\n}\nexport function isGTE(a, b) {\n    return b.diffDays(a) > -1;\n}\nexport function isLTE(a, b) {\n    return a.diffDays(b) > -1;\n}\nexport function formatNumbers(date) {\n    const numbers = getDefaultLocale().numbers;\n    return numbers ? date.toString().replace(latinNumbersPattern, (char) => numbers[+char]) : date;\n}\nexport function fromTo(a, b) {\n    const days = [];\n    let from = +a;\n    const to = +b;\n    for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n        days.push(new XDate(from, true));\n    }\n    return days;\n}\nexport function month(date) {\n    const year = date.getFullYear(), month = date.getMonth();\n    const days = new XDate(year, month + 1, 0).getDate();\n    const firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n    const lastDay = new XDate(year, month, days, 0, 0, 0, true);\n    return fromTo(firstDay, lastDay);\n}\nexport function weekDayNames(firstDayOfWeek = 0) {\n    let weekDaysNames = getDefaultLocale().dayNamesShort;\n    const dayShift = firstDayOfWeek % 7;\n    if (dayShift) {\n        weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n    }\n    return weekDaysNames;\n}\nexport function page(date, firstDayOfWeek = 0, showSixWeeks = false) {\n    const days = month(date);\n    let before = [];\n    let after = [];\n    const fdow = (7 + firstDayOfWeek) % 7 || 7;\n    const ldow = (fdow + 6) % 7;\n    firstDayOfWeek = firstDayOfWeek || 0;\n    const from = days[0].clone();\n    const daysBefore = from.getDay();\n    if (from.getDay() !== fdow) {\n        from.addDays(-(from.getDay() + 7 - fdow) % 7);\n    }\n    const to = days[days.length - 1].clone();\n    const day = to.getDay();\n    if (day !== ldow) {\n        to.addDays((ldow + 7 - day) % 7);\n    }\n    const daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n    if (showSixWeeks && !daysForSixWeeks) {\n        to.addDays(7);\n    }\n    if (isLTE(from, days[0])) {\n        before = fromTo(from, days[0]);\n    }\n    if (isGTE(to, days[days.length - 1])) {\n        after = fromTo(days[days.length - 1], to);\n    }\n    return before.concat(days.slice(1, days.length - 1), after);\n}\nexport function isDateNotInTheRange(minDate, maxDate, date) {\n    return (minDate && !isGTE(date, minDate)) || (maxDate && !isLTE(date, maxDate));\n}\nexport function getWeekDates(date, firstDay = 0, format) {\n    if (date && parseDate(date).valid()) {\n        const current = parseDate(date);\n        const daysArray = [current];\n        let dayOfTheWeek = current.getDay() - firstDay;\n        if (dayOfTheWeek < 0) {\n            // to handle firstDay > 0\n            dayOfTheWeek = 7 + dayOfTheWeek;\n        }\n        let newDate = current;\n        let index = dayOfTheWeek - 1;\n        while (index >= 0) {\n            newDate = parseDate(newDate).addDays(-1);\n            daysArray.unshift(newDate);\n            index -= 1;\n        }\n        newDate = current;\n        index = dayOfTheWeek + 1;\n        while (index < 7) {\n            newDate = parseDate(newDate).addDays(1);\n            daysArray.push(newDate);\n            index += 1;\n        }\n        if (format) {\n            return daysArray.map(d => d.toString(format));\n        }\n        return daysArray;\n    }\n}\nexport function generateDay(originDate, daysOffset = 0) {\n    const baseDate = new XDate(originDate);\n    return toMarkingFormat(baseDate.clone().addDays(daysOffset));\n}\n"]},"metadata":{},"sourceType":"module"}