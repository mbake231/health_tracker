{"ast":null,"code":"import{isJestEnv}from\"../utils\";export var handlerIDToTag={};var gestures=new Map();var oldHandlers=new Map();var testIDs=new Map();var handlerTag=1;export function getNextHandlerTag(){return handlerTag++;}export function registerHandler(handlerTag,handler,testID){gestures.set(handlerTag,handler);if(isJestEnv()&&testID){testIDs.set(testID,handlerTag);}}export function registerOldGestureHandler(handlerTag,handler){oldHandlers.set(handlerTag,handler);}export function unregisterHandler(handlerTag,testID){gestures.delete(handlerTag);if(isJestEnv()&&testID){testIDs.delete(testID);}}export function findHandler(handlerTag){return gestures.get(handlerTag);}export function findOldGestureHandler(handlerTag){return oldHandlers.get(handlerTag);}export function findHandlerByTestID(testID){var handlerTag=testIDs.get(testID);if(handlerTag!==undefined){var _findHandler;return(_findHandler=findHandler(handlerTag))!==null&&_findHandler!==void 0?_findHandler:null;}return null;}","map":{"version":3,"sources":["handlersRegistry.ts"],"names":["handlerIDToTag","gestures","oldHandlers","testIDs","handlerTag","isJestEnv","findHandler"],"mappings":"AAAA,OAAA,SAAA,gBAIA,MAAO,IAAMA,CAAAA,cAAsC,CAA5C,EAAA,CACP,GAAMC,CAAAA,QAAQ,CAAG,GAAjB,CAAA,GAAiB,EAAjB,CACA,GAAMC,CAAAA,WAAW,CAAG,GAApB,CAAA,GAAoB,EAApB,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAhB,CAAA,GAAgB,EAAhB,CAEA,GAAIC,CAAAA,UAAU,CAAd,CAAA,CAEA,MAAO,SAAA,CAAA,iBAAA,EAAqC,CAC1C,MAAOA,CAAAA,UAAP,EAAA,CACD,CAED,MAAO,SAAA,CAAA,eAAA,CAAA,UAAA,CAAA,OAAA,CAAA,MAAA,CAIL,CACAH,QAAQ,CAARA,GAAAA,CAAAA,UAAAA,CAAAA,OAAAA,EACA,GAAII,SAAS,IAAb,MAAA,CAA2B,CACzBF,OAAO,CAAPA,GAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EACD,CACF,CAED,MAAO,SAAA,CAAA,yBAAA,CAAA,UAAA,CAAA,OAAA,CAGL,CACAD,WAAW,CAAXA,GAAAA,CAAAA,UAAAA,CAAAA,OAAAA,EACD,CAED,MAAO,SAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,MAAA,CAAgE,CACrED,QAAQ,CAARA,MAAAA,CAAAA,UAAAA,EACA,GAAII,SAAS,IAAb,MAAA,CAA2B,CACzBF,OAAO,CAAPA,MAAAA,CAAAA,MAAAA,EACD,CACF,CAED,MAAO,SAAA,CAAA,WAAA,CAAA,UAAA,CAAyC,CAC9C,MAAOF,CAAAA,QAAQ,CAARA,GAAAA,CAAP,UAAOA,CAAP,CACD,CAED,MAAO,SAAA,CAAA,qBAAA,CAAA,UAAA,CAAmD,CACxD,MAAOC,CAAAA,WAAW,CAAXA,GAAAA,CAAP,UAAOA,CAAP,CACD,CAED,MAAO,SAAA,CAAA,mBAAA,CAAA,MAAA,CAA6C,CAClD,GAAME,CAAAA,UAAU,CAAGD,OAAO,CAAPA,GAAAA,CAAnB,MAAmBA,CAAnB,CACA,GAAIC,UAAU,GAAd,SAAA,CAA8B,CAAA,GAAA,CAAA,YAAA,CAC5B,MAAA,CAAA,YAAA,CAAOE,WAAW,CAAlB,UAAkB,CAAlB,IAAA,IAAA,EAAA,YAAA,GAAA,IAAA,EAAA,CAAA,YAAA,CAAA,IAAA,CACD,CACD,MAAA,KAAA,CACD","sourcesContent":["import { isJestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nlet handlerTag = 1;\n\nexport function getNextHandlerTag(): number {\n  return handlerTag++;\n}\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"]},"metadata":{},"sourceType":"module"}