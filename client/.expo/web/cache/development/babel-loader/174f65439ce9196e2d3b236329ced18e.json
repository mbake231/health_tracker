{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport Drawer from \"react-bottom-drawer\";\nimport axios from 'axios';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-modal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function WorkoutCalendar(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      workOut = _useState2[0],\n      setWorkOut = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      date = _useState6[0],\n      setDate = _useState6[1];\n\n  function getDayData(d) {\n    var ctr = 0;\n\n    while (ctr < props.workout_data.length) {\n      if (props.workout_data[ctr].date === d.dateString) {\n        return props.workout_data[ctr].activity_data.workOut;\n      }\n\n      ctr++;\n    }\n\n    return 'empty';\n  }\n\n  function submitNewEatingData() {\n    var json = {\n      activity_type: \"workout\",\n      date: date,\n      activity_data: {\n        workOut: workOut\n      }\n    };\n    var url;\n    if (process.env.NODE_ENV == 'production') url = '';else url = 'http://localhost:3000';\n    console.log(JSON.stringify(json));\n    axios.post(url + '/Activity/edit', json, {\n      withCredentials: true\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(setTimeout(function () {\n      props.updateData();\n    }, 500));\n    setModalVisible(false);\n  }\n\n  function getDataforScroll() {\n    var today = new Date();\n    var month = today.getMonth() + 5;\n    var year = today.getFullYear();\n    return year + '-' + month + '-01';\n  }\n\n  function handleClickDay(d) {\n    setModalVisible(true);\n    setDate(d.dateString);\n  }\n\n  var styles = StyleSheet.create({\n    centeredView: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: 22\n    },\n    modalView: {\n      margin: 20,\n      backgroundColor: \"white\",\n      borderRadius: 20,\n      padding: 35,\n      alignItems: \"center\",\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 2\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 4,\n      elevation: 5\n    },\n    button: {\n      borderRadius: 20,\n      padding: 10,\n      elevation: 2\n    },\n    buttonOpen: {\n      backgroundColor: \"#F194FF\"\n    },\n    buttonClose: {\n      backgroundColor: \"#2196F3\"\n    },\n    textStyle: {\n      color: \"white\",\n      fontWeight: \"bold\",\n      textAlign: \"center\"\n    },\n    modalText: {\n      marginBottom: 15,\n      textAlign: \"center\"\n    }\n  });\n  return _jsxs(\"div\", {\n    children: [_jsx(CalendarList, {\n      style: {\n        height: '600px'\n      },\n      dayComponent: function dayComponent(_ref) {\n        var date = _ref.date,\n            state = _ref.state;\n        return _jsx(\"div\", {\n          onClick: function onClick() {\n            handleClickDay(date);\n          },\n          style: {\n            textAlign: 'center'\n          },\n          children: getDayData(date)\n        });\n      },\n      theme: {\n        backgroundColor: '#ccc',\n        'stylesheet.calendar.main': {\n          dayContainer: {\n            borderBottomWidth: '2px',\n            borderBottomColor: 'black',\n            borderTopWidth: '2px',\n            borderTopColor: 'black',\n            borderLeftWidth: '1px',\n            borderLeftColor: 'black',\n            borderRightWidth: '1px',\n            borderRightColor: 'black',\n            flex: 1,\n            alignItems: 'center',\n            height: '60px'\n          }\n        }\n      },\n      pastScrollRange: 10,\n      futureScrollRange: 4,\n      scrollEnabled: true,\n      showScrollIndicator: true\n    }), _jsx(Modal, {\n      onBackdropPress: function onBackdropPress() {\n        setModalVisible(!modalVisible);\n      },\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n        setModalVisible(!modalVisible);\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsxs(\"form\", {\n            onChange: function onChange(e) {\n              return setWorkOut(e.target.value);\n            },\n            children: [_jsx(\"div\", {\n              children: \"Followed diet?\"\n            }), _jsx(\"input\", {\n              type: \"radio\",\n              value: \"cardio\",\n              name: \"followedDiet\"\n            }), \" Cardio\", _jsx(\"input\", {\n              type: \"radio\",\n              value: \"strength\",\n              name: \"followedDiet\"\n            }), \" Strength\"]\n          }), _jsx(Pressable, {\n            style: [styles.button, styles.buttonClose],\n            onPress: function onPress() {\n              return submitNewEatingData();\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Save\"\n            })\n          })]\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/components/WorkoutCalendar.jsx"],"names":["React","useState","Calendar","CalendarList","Agenda","Drawer","axios","Modal","WorkoutCalendar","props","workOut","setWorkOut","modalVisible","setModalVisible","date","setDate","getDayData","d","ctr","workout_data","length","dateString","activity_data","submitNewEatingData","json","activity_type","url","process","env","NODE_ENV","console","log","JSON","stringify","post","withCredentials","headers","then","setTimeout","updateData","getDataforScroll","today","Date","month","getMonth","year","getFullYear","handleClickDay","styles","StyleSheet","create","centeredView","justifyContent","alignItems","marginTop","modalView","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","color","fontWeight","textAlign","modalText","marginBottom","state","dayContainer","borderBottomWidth","borderBottomColor","borderTopWidth","borderTopColor","borderLeftWidth","borderLeftColor","borderRightWidth","borderRightColor","flex","Alert","alert","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Calendar, CalendarList, Agenda} from 'react-native-calendars';\nimport Drawer from \"react-bottom-drawer\";\nimport axios from 'axios';\nimport { Alert, StyleSheet, Text, Pressable, View } from \"react-native\";\nimport Modal from \"react-native-modal\";\n\nexport default function WorkoutCalendar(props) {\n\n  const [workOut, setWorkOut] = useState('');\n  const [modalVisible, setModalVisible] = useState(false);\n  const [date, setDate] = useState(false);\n\n  function getDayData(d) {   \n  var ctr = 0;\n  while (ctr<props.workout_data.length){\n    if(props.workout_data[ctr].date===d.dateString){\n      return props.workout_data[ctr].activity_data.workOut;\n    }\n    ctr++;\n  }\n  return 'empty';\n}\n\nfunction submitNewEatingData(){\n  var json = ({\n    activity_type : \"workout\",\n    date : date,\n    activity_data : {\n        workOut : workOut\n    }\n    });\n    var url;\n        if(process.env.NODE_ENV=='production')\n            url='';\n        else\n            url='http://localhost:3000'\nconsole.log(JSON.stringify(json))\n  axios.post(url+'/Activity/edit', json,{ withCredentials: true },{\n        headers: {'Content-Type': 'application/json'}})\n      .then(\n        setTimeout(() => {\n          props.updateData()\n       }, 500)\n\n        \n        );\n        setModalVisible(false);\n  \n}\nfunction getDataforScroll(){\n    var today = new Date();\n    var month = today.getMonth()+5;\n    var year = today.getFullYear();\n    return year+'-'+month+'-01'\n  }\n  \n\nfunction handleClickDay(d){\n\n    setModalVisible(true);\n  setDate(d.dateString);\n}\n\nconst styles = StyleSheet.create({\n    centeredView: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: 22\n    },\n    modalView: {\n      margin: 20,\n      backgroundColor: \"white\",\n      borderRadius: 20,\n      padding: 35,\n      alignItems: \"center\",\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 2\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 4,\n      elevation: 5\n    },\n    button: {\n      borderRadius: 20,\n      padding: 10,\n      elevation: 2\n    },\n    buttonOpen: {\n      backgroundColor: \"#F194FF\",\n    },\n    buttonClose: {\n      backgroundColor: \"#2196F3\",\n    },\n    textStyle: {\n      color: \"white\",\n      fontWeight: \"bold\",\n      textAlign: \"center\"\n    },\n    modalText: {\n      marginBottom: 15,\n      textAlign: \"center\"\n    }\n  });\n\n\n      return (\n        <div>\n        <CalendarList\n      style={{height:'600px'}}\n        dayComponent={({date, state}) => {\n          return (\n           \n              <div onClick={() => {handleClickDay(date)}} style={{textAlign: 'center'}}>{getDayData(date)}</div>\n           \n          );\n        }}\n\n  theme={{\n    backgroundColor: '#ccc',\n    'stylesheet.calendar.main': {\n      dayContainer: {\n        borderBottomWidth:'2px',\n        borderBottomColor:'black',\n        borderTopWidth:'2px',\n        borderTopColor:'black',\n        borderLeftWidth:'1px',\n        borderLeftColor:'black',\n        borderRightWidth:'1px',\n        borderRightColor:'black',\n        flex: 1,\n        alignItems: 'center',\n        height:'60px'\n      \n      }\n    }\n  }}\n\n\n         // Callback which gets executed when visible months change in scroll view. Default = undefined\n   // Max amount of months allowed to scroll to the past. Default = 50\n   pastScrollRange={10}\n   // Max amount of months allowed to scroll to the future. Default = 50\n   futureScrollRange={4}\n   // Enable or disable scrolling of calendar list\n   scrollEnabled={true}\n   // Enable or disable vertical scroll indicator. Default = false\n   showScrollIndicator={true}\n  \n />\n\n\n\n            <Modal\n         onBackdropPress={() => {setModalVisible(!modalVisible)}}\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => {\n          Alert.alert(\"Modal has been closed.\");\n          setModalVisible(!modalVisible);\n        }}\n      >\n        <View style={styles.centeredView}>\n          <View style={styles.modalView}>\n          <form onChange={e=>setWorkOut(e.target.value)}>\n              <div>Followed diet?</div>\n                <input type=\"radio\" value=\"cardio\" name=\"followedDiet\"/> Cardio\n                <input type=\"radio\" value=\"strength\" name=\"followedDiet\"/> Strength\n            </form>\n            <Pressable\n              style={[styles.button, styles.buttonClose]}\n              onPress={() => submitNewEatingData()}\n            >\n              <Text style={styles.textStyle}>Save</Text>\n            </Pressable>\n          </View>\n        </View>\n      </Modal>\n            </div>\n          )\n      }\n\n\n"]},"metadata":{},"sourceType":"module"}