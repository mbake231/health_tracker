{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-modal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CalModals() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      drinkValue = _useState2[0],\n      setDrinkValue = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalVisible = _useState4[0],\n      setModalVisible = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      date = _useState6[0],\n      setDate = _useState6[1];\n\n  var styles = StyleSheet.create({\n    centeredView: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: 22\n    },\n    modalView: {\n      margin: 20,\n      backgroundColor: \"white\",\n      borderRadius: 20,\n      padding: 35,\n      alignItems: \"center\",\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 2\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 4,\n      elevation: 5\n    },\n    button: {\n      borderRadius: 20,\n      padding: 10,\n      elevation: 2\n    },\n    buttonOpen: {\n      backgroundColor: \"#F194FF\"\n    },\n    buttonClose: {\n      backgroundColor: \"#2196F3\"\n    },\n    textStyle: {\n      color: \"white\",\n      fontWeight: \"bold\",\n      textAlign: \"center\"\n    },\n    modalText: {\n      marginBottom: 15,\n      textAlign: \"center\"\n    }\n  });\n\n  function getModalQuestions(calType) {\n    if (calType === 'alcohol') {\n      return _jsxs(View, {\n        style: styles.modalView,\n        children: [_jsxs(\"form\", {\n          onChange: function onChange(e) {\n            return setDrinkValue(e.target.value);\n          },\n          children: [_jsx(\"div\", {\n            children: \"Number of drinks\"\n          }), _jsx(\"input\", {\n            type: \"text\",\n            value: drinkValue,\n            onChange: function onChange(e) {\n              return setDrinkValue(e.target.value);\n            }\n          })]\n        }), _jsx(Pressable, {\n          style: [styles.button, styles.buttonClose],\n          onPress: function onPress() {\n            return submitNewAlcoholData();\n          },\n          children: _jsx(Text, {\n            style: styles.textStyle,\n            children: \"Save\"\n          })\n        })]\n      });\n    } else if (calType === 'diet') {} else if (calType === 'workout') {}\n  }\n\n  return _jsx(Modal, {\n    animationType: \"slide\",\n    onBackdropPress: function onBackdropPress() {\n      setModalVisible(!modalVisible);\n    },\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      Alert.alert(\"Modal has been closed.\");\n      setModalVisible(!modalVisible);\n    },\n    children: _jsx(View, {\n      style: styles.centeredView,\n      children: function children() {\n        return getModalQuestions();\n      }\n    })\n  });\n}","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/components/CalModals.jsx"],"names":["React","useState","axios","Modal","CalModals","drinkValue","setDrinkValue","modalVisible","setModalVisible","date","setDate","styles","StyleSheet","create","centeredView","justifyContent","alignItems","marginTop","modalView","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","color","fontWeight","textAlign","modalText","marginBottom","getModalQuestions","calType","e","target","value","submitNewAlcoholData","Alert","alert"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Alert, StyleSheet, Text, Pressable, View } from \"react-native\";\nimport Modal from \"react-native-modal\";\n\n\nexport default function CalModals() {\n\n  const [drinkValue, setDrinkValue] = useState(\"\");\n  const [modalVisible, setModalVisible] = useState(true);\n  const [date, setDate] = useState(false);\n\n  const styles = StyleSheet.create({\n    centeredView: {\n\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: 22\n    },\n    modalView: {\n      margin: 20,\n      backgroundColor: \"white\",\n      borderRadius: 20,\n      padding: 35,\n      alignItems: \"center\",\n      shadowColor: \"#000\",\n      shadowOffset: {\n        width: 0,\n        height: 2\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 4,\n      elevation: 5\n    },\n    button: {\n      borderRadius: 20,\n      padding: 10,\n      elevation: 2\n    },\n    buttonOpen: {\n      backgroundColor: \"#F194FF\",\n    },\n    buttonClose: {\n      backgroundColor: \"#2196F3\",\n    },\n    textStyle: {\n      color: \"white\",\n      fontWeight: \"bold\",\n      textAlign: \"center\"\n    },\n    modalText: {\n      marginBottom: 15,\n      textAlign: \"center\"\n    }\n  });\n\n  function getModalQuestions(calType){\n    if(calType==='alcohol'){\n        return <View style={styles.modalView}>\n        <form onChange={e => setDrinkValue(e.target.value)}>\n          <div>Number of drinks</div>\n          <input type=\"text\" value={drinkValue} onChange={e => setDrinkValue(e.target.value)} />\n        </form>\n        <Pressable\n          style={[styles.button, styles.buttonClose]}\n          onPress={() => submitNewAlcoholData()}\n        >\n          <Text style={styles.textStyle}>Save</Text>\n        </Pressable>\n      </View>\n\n    }\n    else if(calType==='diet'){\n\n\n    }\n    else if(calType==='workout'){\n\n\n    }\n\n\n\n  }\n\n\n      // NOTE: You also need to provide styles, see https://github.com/negomi/react-burger-menu#styling\n      return (\n           <Modal\n        animationType=\"slide\"\n        onBackdropPress={() => { setModalVisible(!modalVisible) }}\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => {\n          Alert.alert(\"Modal has been closed.\");\n          setModalVisible(!modalVisible);\n        }}\n\n      >\n        <View style={styles.centeredView}>\n          {()=>getModalQuestions()}\n        </View>\n      </Modal>\n      );\n    \n  }\n\n"]},"metadata":{},"sourceType":"module"}