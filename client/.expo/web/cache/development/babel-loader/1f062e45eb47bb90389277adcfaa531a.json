{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport Drawer from \"react-bottom-drawer\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function EatingCalendar(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      followedDiet = _useState2[0],\n      setFollowedDiet = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      endedFast = _useState4[0],\n      setEndedFast = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      drawyerVisibile = _useState6[0],\n      setDrawyerVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      date = _useState8[0],\n      setDate = _useState8[1];\n\n  function getDayData(d) {\n    var ctr = 0;\n\n    while (ctr < props.eating_data.length) {\n      if (props.eating_data[ctr].date === d.dateString) {\n        return props.eating_data[ctr].activity_data.alcoholDrinksHad;\n      }\n\n      ctr++;\n    }\n\n    return 'empty';\n  }\n\n  function submitNewAlcoholData(e) {\n    e.preventDefault();\n    var json = {\n      activity_type: \"alcohol\",\n      date: date,\n      activity_data: {\n        alcoholDrinksHad: drinkValue\n      }\n    };\n    console.log(JSON.stringify(json));\n    axios.post('http://localhost:3000/Activity/edit', json, {\n      withCredentials: true\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(setTimeout(function () {\n      props.updateData();\n    }, 500));\n    setDrawyerVisible(false);\n  }\n\n  function handleClickDay(d) {\n    console.log(d.dateString);\n    setDrawyerVisible(true);\n    setDate(d.dateString);\n  }\n\n  return _jsxs(\"div\", {\n    children: [_jsx(CalendarList, {\n      dayComponent: function dayComponent(_ref) {\n        var date = _ref.date,\n            state = _ref.state;\n        return _jsx(\"div\", {\n          onClick: function onClick() {\n            handleClickDay(date);\n          },\n          style: {\n            textAlign: 'center'\n          },\n          children: getDayData(date)\n        });\n      },\n      theme: {\n        backgroundColor: '#ccc',\n        'stylesheet.calendar.main': {\n          dayContainer: {\n            borderBottomWidth: '2px',\n            borderBottomColor: 'black',\n            borderTopWidth: '2px',\n            borderTopColor: 'black',\n            borderLeftWidth: '1px',\n            borderLeftColor: 'black',\n            borderRightWidth: '1px',\n            borderRightColor: 'black',\n            flex: 1,\n            alignItems: 'center',\n            height: '60px'\n          }\n        }\n      },\n      onVisibleMonthsChange: function onVisibleMonthsChange(months) {\n        console.log('now these months are visible', months);\n      },\n      pastScrollRange: 3,\n      futureScrollRange: 2,\n      scrollEnabled: true,\n      showScrollIndicator: true\n    }), _jsxs(Drawer, {\n      isVisible: drawyerVisibile,\n      children: [_jsxs(\"div\", {\n        onChange: function onChange(e) {\n          return setFollowedDiet(e.target.value);\n        },\n        children: [_jsx(\"input\", {\n          type: \"radio\",\n          value: \"true\",\n          name: \"followedDiet\"\n        }), \" Male\", _jsx(\"input\", {\n          type: \"radio\",\n          value: \"false\",\n          name: \"followedDiet\"\n        }), \" Female\"]\n      }), _jsx(\"input\", {\n        type: \"text\",\n        value: 'hi',\n        onChange: function onChange(e) {\n          return setDrinkValue(e.target.value);\n        }\n      }), _jsx(\"button\", {\n        onClick: function onClick(e) {\n          submitNewAlcoholData(e);\n        },\n        children: \"Submit\"\n      })]\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/components/EatingCalendar.jsx"],"names":["React","useState","Calendar","CalendarList","Agenda","Drawer","axios","EatingCalendar","props","followedDiet","setFollowedDiet","endedFast","setEndedFast","drawyerVisibile","setDrawyerVisible","date","setDate","getDayData","d","ctr","eating_data","length","dateString","activity_data","alcoholDrinksHad","submitNewAlcoholData","e","preventDefault","json","activity_type","drinkValue","console","log","JSON","stringify","post","withCredentials","headers","then","setTimeout","updateData","handleClickDay","state","textAlign","backgroundColor","dayContainer","borderBottomWidth","borderBottomColor","borderTopWidth","borderTopColor","borderLeftWidth","borderLeftColor","borderRightWidth","borderRightColor","flex","alignItems","height","months","target","value","setDrinkValue"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Calendar, CalendarList, Agenda} from 'react-native-calendars';\nimport Drawer from \"react-bottom-drawer\";\nimport axios from 'axios';\n\nexport default function EatingCalendar(props) {\n\n  const [followedDiet, setFollowedDiet] = useState(true);\n  const [endedFast, setEndedFast] = useState(false);\n  const [drawyerVisibile, setDrawyerVisible] = useState(false);\n\n  const [date, setDate] = useState(false);\n\n  function getDayData(d) {   \n  var ctr = 0;\n  while (ctr<props.eating_data.length){\n    if(props.eating_data[ctr].date===d.dateString){\n      return props.eating_data[ctr].activity_data.alcoholDrinksHad;\n    }\n    ctr++;\n  }\n  return 'empty';\n}\n\nfunction submitNewAlcoholData(e){\n  e.preventDefault();\n // console.log(drinkValue+' '+date);\n\n  var json = ({\n    activity_type : \"alcohol\",\n    date : date,\n    activity_data : {\n        alcoholDrinksHad : drinkValue\n    }\n    });\nconsole.log(JSON.stringify(json))\n  axios.post('http://localhost:3000/Activity/edit', json,{ withCredentials: true },{\n        headers: {'Content-Type': 'application/json'}})\n      .then(\n        setTimeout(() => {\n          props.updateData()\n       }, 500)\n\n        \n        );\n  setDrawyerVisible(false);\n  \n}\n\n\nfunction handleClickDay(d){\n  console.log(d.dateString)\n  setDrawyerVisible(true);\n  setDate(d.dateString);\n}\n\n      return (\n        <div>\n        <CalendarList\n      \n        dayComponent={({date, state}) => {\n          return (\n           \n              <div onClick={() => {handleClickDay(date)}} style={{textAlign: 'center'}}>{getDayData(date)}</div>\n           \n          );\n        }}\n\n  theme={{\n    backgroundColor: '#ccc',\n    'stylesheet.calendar.main': {\n      dayContainer: {\n        borderBottomWidth:'2px',\n        borderBottomColor:'black',\n        borderTopWidth:'2px',\n        borderTopColor:'black',\n        borderLeftWidth:'1px',\n        borderLeftColor:'black',\n        borderRightWidth:'1px',\n        borderRightColor:'black',\n        flex: 1,\n        alignItems: 'center',\n        height:'60px'\n      \n      }\n    }\n  }}\n\n       \n         // Callback which gets executed when visible months change in scroll view. Default = undefined\n   onVisibleMonthsChange={(months) => {console.log('now these months are visible', months);}}\n   // Max amount of months allowed to scroll to the past. Default = 50\n   pastScrollRange={3}\n   // Max amount of months allowed to scroll to the future. Default = 50\n   futureScrollRange={2}\n   // Enable or disable scrolling of calendar list\n   scrollEnabled={true}\n   // Enable or disable vertical scroll indicator. Default = false\n   showScrollIndicator={true}\n  \n />\n <Drawer\n        isVisible={drawyerVisibile}\n        >\n           <div onChange={e=>setFollowedDiet(e.target.value)}>\n                <input type=\"radio\" value=\"true\" name=\"followedDiet\"/> Male\n                <input type=\"radio\" value=\"false\" name=\"followedDiet\"/> Female\n            </div>\n           <input type=\"text\" value={'hi'} onChange={e => setDrinkValue(e.target.value)} />\n          <button onClick={(e)=>{submitNewAlcoholData(e)}}>Submit</button>\n            </Drawer>\n            \n            </div>\n          )\n      }\n\n\n"]},"metadata":{},"sourceType":"module"}