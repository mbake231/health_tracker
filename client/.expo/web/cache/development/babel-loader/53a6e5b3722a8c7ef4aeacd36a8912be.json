{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Constants = UIManager.CTLAppBarLayout.Constants;\n\nvar AppBarLayout = function (_Component) {\n  _inherits(AppBarLayout, _Component);\n\n  var _super = _createSuper(AppBarLayout);\n\n  function AppBarLayout() {\n    var _this;\n\n    _classCallCheck(this, AppBarLayout);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleOffsetChanged = function (e) {\n      var onOffsetChanged = _this.props.onOffsetChanged;\n      onOffsetChanged && onOffsetChanged(e);\n    };\n\n    _this.show = function () {\n      UIManager.dispatchViewManagerCommand(_this.getViewHandle(), UIManager.CTLAppBarLayout.Commands.show, null);\n    };\n\n    _this.hide = function () {\n      UIManager.dispatchViewManagerCommand(_this.getViewHandle(), UIManager.CTLAppBarLayout.Commands.hide, null);\n    };\n\n    _this.redraw = function () {\n      UIManager.dispatchViewManagerCommand(_this.getViewHandle(), UIManager.CTLAppBarLayout.Commands.redraw, null);\n    };\n\n    _this.getViewHandle = function () {\n      return findNodeHandle(_this.appBarLayout);\n    };\n\n    return _this;\n  }\n\n  _createClass(AppBarLayout, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _jsx(CTLAppBarLayout, _objectSpread(_objectSpread({}, this.props), {}, {\n        ref: function ref(_ref) {\n          return _this2.appBarLayout = _ref;\n        },\n        onOffsetChanged: this.handleOffsetChanged\n      }));\n    }\n  }]);\n\n  return AppBarLayout;\n}(Component);\n\nAppBarLayout.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  height: PropTypes.number,\n  onOffsetChanged: PropTypes.func\n});\nAppBarLayout.SCROLL_FLAG_SNAP = Constants.SCROLL_FLAG_SNAP;\nAppBarLayout.SCROLL_FLAG_SCROLL = Constants.SCROLL_FLAG_SCROLL;\nAppBarLayout.SCROLL_FLAG_ENTER_ALWAYS = Constants.SCROLL_FLAG_ENTER_ALWAYS;\nAppBarLayout.SCROLL_FLAG_EXIT_UNTIL_COLLAPSED = Constants.SCROLL_FLAG_EXIT_UNTIL_COLLAPSED;\nAppBarLayout.SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED = Constants.SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED;\nvar CTLAppBarLayout = requireNativeComponent('CTLAppBarLayout', AppBarLayout);\nexport default AppBarLayout;","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/node_modules/react-native-collapsing-toolbar/lib/AppBarLayout.js"],"names":["React","Component","PropTypes","ViewPropTypes","requireNativeComponent","Constants","UIManager","CTLAppBarLayout","AppBarLayout","handleOffsetChanged","e","onOffsetChanged","props","show","dispatchViewManagerCommand","getViewHandle","Commands","hide","redraw","findNodeHandle","appBarLayout","ref","propTypes","height","number","func","SCROLL_FLAG_SNAP","SCROLL_FLAG_SCROLL","SCROLL_FLAG_ENTER_ALWAYS","SCROLL_FLAG_EXIT_UNTIL_COLLAPSED","SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;SAKEC,a;SACAC,sB;;AAGF,IAAQC,SAAR,GAAsBC,SAAS,CAACC,eAAhC,CAAQF,SAAR;;IAEMG,Y;;;;;;;;;;;;;;;;UAaJC,mB,GAAsB,UAACC,CAAD,EAAO;AAC3B,UAAQC,eAAR,GAA4B,MAAKC,KAAjC,CAAQD,eAAR;AACAA,MAAAA,eAAe,IAAIA,eAAe,CAACD,CAAD,CAAlC;AACD,K;;UAEDG,I,GAAO,YAAM;AACXP,MAAAA,SAAS,CAACQ,0BAAV,CACE,MAAKC,aAAL,EADF,EAEET,SAAS,CAACC,eAAV,CAA0BS,QAA1B,CAAmCH,IAFrC,EAGE,IAHF;AAKD,K;;UAEDI,I,GAAO,YAAM;AACXX,MAAAA,SAAS,CAACQ,0BAAV,CACE,MAAKC,aAAL,EADF,EAEET,SAAS,CAACC,eAAV,CAA0BS,QAA1B,CAAmCC,IAFrC,EAGE,IAHF;AAKD,K;;UAEDC,M,GAAS,YAAM;AACbZ,MAAAA,SAAS,CAACQ,0BAAV,CACE,MAAKC,aAAL,EADF,EAEET,SAAS,CAACC,eAAV,CAA0BS,QAA1B,CAAmCE,MAFrC,EAGE,IAHF;AAKD,K;;UAEDH,a,GAAgB,YAAM;AACpB,aAAOI,cAAc,CAAC,MAAKC,YAAN,CAArB;AACD,K;;;;;;;WAED,kBAAS;AAAA;;AACP,aACE,KAAC,eAAD,kCACM,KAAKR,KADX;AAEE,QAAA,GAAG,EAAE,aAAAS,IAAG;AAAA,iBAAI,MAAI,CAACD,YAAL,GAAoBC,IAAxB;AAAA,SAFV;AAGE,QAAA,eAAe,EAAE,KAAKZ;AAHxB,SADF;AAOD;;;;EAtDwBR,S;;AAArBO,Y,CACGc,S,mCACFnB,a;AACHoB,EAAAA,MAAM,EAAErB,SAAS,CAACsB,M;AAClBb,EAAAA,eAAe,EAAET,SAAS,CAACuB;;AAJzBjB,Y,CAOGkB,gB,GAAmBrB,SAAS,CAACqB,gB;AAPhClB,Y,CAQGmB,kB,GAAqBtB,SAAS,CAACsB,kB;AARlCnB,Y,CASGoB,wB,GAA2BvB,SAAS,CAACuB,wB;AATxCpB,Y,CAUGqB,gC,GAAmCxB,SAAS,CAACwB,gC;AAVhDrB,Y,CAWGsB,kC,GAAqCzB,SAAS,CAACyB,kC;AA8CxD,IAAMvB,eAAe,GAAGH,sBAAsB,CAAC,iBAAD,EAAoBI,YAApB,CAA9C;AAEA,eAAeA,YAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  UIManager,\n  findNodeHandle,\n  StyleSheet,\n  ViewPropTypes,\n  requireNativeComponent,\n} from 'react-native'\n\nconst { Constants } = UIManager.CTLAppBarLayout\n\nclass AppBarLayout extends Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    height: PropTypes.number,\n    onOffsetChanged: PropTypes.func,\n  };\n\n  static SCROLL_FLAG_SNAP = Constants.SCROLL_FLAG_SNAP;\n  static SCROLL_FLAG_SCROLL = Constants.SCROLL_FLAG_SCROLL;\n  static SCROLL_FLAG_ENTER_ALWAYS = Constants.SCROLL_FLAG_ENTER_ALWAYS;\n  static SCROLL_FLAG_EXIT_UNTIL_COLLAPSED = Constants.SCROLL_FLAG_EXIT_UNTIL_COLLAPSED;\n  static SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED = Constants.SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED;\n\n  handleOffsetChanged = (e) => {\n    const { onOffsetChanged } = this.props\n    onOffsetChanged && onOffsetChanged(e)\n  }\n\n  show = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getViewHandle(),\n      UIManager.CTLAppBarLayout.Commands.show,\n      null\n    );\n  };\n\n  hide = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getViewHandle(),\n      UIManager.CTLAppBarLayout.Commands.hide,\n      null\n    );\n  };\n\n  redraw = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getViewHandle(),\n      UIManager.CTLAppBarLayout.Commands.redraw,\n      null\n    );\n  };\n\n  getViewHandle = () => {\n    return findNodeHandle(this.appBarLayout);\n  };\n\n  render() {\n    return (\n      <CTLAppBarLayout\n        {...this.props}\n        ref={ref => this.appBarLayout = ref}\n        onOffsetChanged={this.handleOffsetChanged}\n      />\n    )\n  }\n}\n\nconst CTLAppBarLayout = requireNativeComponent('CTLAppBarLayout', AppBarLayout)\n\nexport default AppBarLayout\n"]},"metadata":{},"sourceType":"module"}