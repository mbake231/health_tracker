{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar propTypes = {\n  children: PropTypes.node.isRequired,\n  src: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.number]).isRequired,\n  title: PropTypes.string,\n  titleColor: PropTypes.string,\n  leftItem: PropTypes.element,\n  leftItemPress: PropTypes.func,\n  rightItem: PropTypes.element,\n  rightItemPress: PropTypes.func,\n  toolbarColor: PropTypes.string,\n  toolbarMaxHeight: PropTypes.number,\n  toolbarMinHeight: PropTypes.number\n};\nvar defaultProps = {\n  leftItem: null,\n  leftItemPress: null,\n  rightItem: null,\n  rightItemPress: null,\n  title: 'Home',\n  titleColor: '#fff',\n  toolbarColor: '#e91e63',\n  toolbarMaxHeight: 300,\n  toolbarMinHeight: 55\n};\n\nvar CollapsingToolbar = function (_Component) {\n  _inherits(CollapsingToolbar, _Component);\n\n  var _super = _createSuper(CollapsingToolbar);\n\n  function CollapsingToolbar(props) {\n    var _this;\n\n    _classCallCheck(this, CollapsingToolbar);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      scrollY: new Animated.Value(0)\n    };\n    return _this;\n  }\n\n  _createClass(CollapsingToolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          src = _this$props.src,\n          leftItem = _this$props.leftItem,\n          leftItemPress = _this$props.leftItemPress,\n          rightItem = _this$props.rightItem,\n          rightItemPress = _this$props.rightItemPress,\n          title = _this$props.title,\n          titleColor = _this$props.titleColor,\n          toolbarColor = _this$props.toolbarColor,\n          toolbarMaxHeight = _this$props.toolbarMaxHeight,\n          toolbarMinHeight = _this$props.toolbarMinHeight;\n      var scrollDistance = toolbarMaxHeight - toolbarMinHeight;\n      var headerTranslate = this.state.scrollY.interpolate({\n        inputRange: [0, scrollDistance],\n        outputRange: [0, -scrollDistance],\n        extrapolate: 'clamp'\n      });\n      var imageOpacity = this.state.scrollY.interpolate({\n        inputRange: [0, scrollDistance / 2, scrollDistance],\n        outputRange: [1, 1, 0],\n        extrapolate: 'clamp'\n      });\n      var imageTranslate = this.state.scrollY.interpolate({\n        inputRange: [0, scrollDistance],\n        outputRange: [0, 100],\n        extrapolate: 'clamp'\n      });\n      var titleScale = this.state.scrollY.interpolate({\n        inputRange: [0, scrollDistance / 2, scrollDistance],\n        outputRange: [1, 1, 0.8],\n        extrapolate: 'clamp'\n      });\n      var titleTranslate = this.state.scrollY.interpolate({\n        inputRange: [0, scrollDistance / 2, scrollDistance],\n        outputRange: [0, 0, -8],\n        extrapolate: 'clamp'\n      });\n      return _jsxs(View, {\n        style: styles.fill,\n        children: [_jsx(Animated.ScrollView, {\n          style: styles.fill,\n          scrollEventThrottle: 1,\n          onScroll: Animated.event([{\n            nativeEvent: {\n              contentOffset: {\n                y: this.state.scrollY\n              }\n            }\n          }], {\n            useNativeDriver: true\n          }),\n          children: _jsx(View, {\n            style: {\n              marginTop: toolbarMaxHeight,\n              minHeight: 700\n            },\n            children: children\n          })\n        }), _jsxs(Animated.View, {\n          style: [styles.header, {\n            backgroundColor: toolbarColor,\n            height: toolbarMaxHeight,\n            transform: [{\n              translateY: headerTranslate\n            }]\n          }],\n          children: [_jsx(Animated.Image, {\n            style: [styles.backgroundImage, {\n              height: toolbarMaxHeight,\n              opacity: imageOpacity,\n              transform: [{\n                translateY: imageTranslate\n              }]\n            }],\n            source: src\n          }), _jsx(Animated.View, {\n            style: [styles.action, {\n              backgroundColor: 'transparent',\n              transform: [{\n                scale: titleScale\n              }]\n            }],\n            children: _jsx(Text, {\n              style: [styles.title, {\n                color: titleColor\n              }],\n              children: title\n            })\n          })]\n        }), _jsxs(Animated.View, {\n          style: styles.bar,\n          children: [_jsx(TouchableOpacity, {\n            onPress: leftItemPress,\n            children: _jsx(View, {\n              style: styles.left,\n              children: leftItem\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: rightItemPress,\n            children: _jsx(View, {\n              style: styles.right,\n              children: rightItem\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return CollapsingToolbar;\n}(Component);\n\nCollapsingToolbar.propTypes = propTypes;\nCollapsingToolbar.defaultProps = defaultProps;\nexport default CollapsingToolbar;","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/node_modules/react-native-collapsingtoolbar/src/index.js"],"names":["React","Component","PropTypes","styles","propTypes","children","node","isRequired","src","oneOfType","object","number","title","string","titleColor","leftItem","element","leftItemPress","func","rightItem","rightItemPress","toolbarColor","toolbarMaxHeight","toolbarMinHeight","defaultProps","CollapsingToolbar","props","state","scrollY","Animated","Value","scrollDistance","headerTranslate","interpolate","inputRange","outputRange","extrapolate","imageOpacity","imageTranslate","titleScale","titleTranslate","fill","event","nativeEvent","contentOffset","y","useNativeDriver","marginTop","minHeight","header","backgroundColor","height","transform","translateY","backgroundImage","opacity","action","scale","color","bar","left","right"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Animated,\r\n  Platform,\r\n  StatusBar,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity\r\n} from 'react-native';\r\nimport styles from \"./styles\";\r\n\r\nconst propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  src: React.PropTypes.oneOfType([\r\n    React.PropTypes.object,\r\n    React.PropTypes.number,\r\n  ]).isRequired,\r\n  title: PropTypes.string,\r\n  titleColor: PropTypes.string,\r\n  leftItem: PropTypes.element,\r\n  leftItemPress: PropTypes.func,\r\n  rightItem: PropTypes.element,\r\n  rightItemPress: PropTypes.func,\r\n  toolbarColor: PropTypes.string,\r\n  toolbarMaxHeight: PropTypes.number,\r\n  toolbarMinHeight: PropTypes.number,\r\n}\r\nconst defaultProps = {\r\n  leftItem: null,\r\n  leftItemPress: null,\r\n  rightItem: null,\r\n  rightItemPress: null,\r\n  title: 'Home',\r\n  titleColor: '#fff',\r\n  toolbarColor: '#e91e63',\r\n  toolbarMaxHeight: 300,\r\n  toolbarMinHeight: 55,\r\n};\r\n\r\nclass CollapsingToolbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      scrollY: new Animated.Value(0),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { children,src,leftItem,leftItemPress,rightItem,rightItemPress,title,titleColor,toolbarColor,toolbarMaxHeight,toolbarMinHeight } = this.props;\r\n    const scrollDistance = toolbarMaxHeight - toolbarMinHeight;\r\n    const headerTranslate = this.state.scrollY.interpolate({\r\n      inputRange: [0, scrollDistance],\r\n      outputRange: [0, -scrollDistance],\r\n      extrapolate: 'clamp',\r\n    });\r\n\r\n    const imageOpacity = this.state.scrollY.interpolate({\r\n      inputRange: [0, scrollDistance / 2, scrollDistance],\r\n      outputRange: [1, 1, 0],\r\n      extrapolate: 'clamp',\r\n    });\r\n    const imageTranslate = this.state.scrollY.interpolate({\r\n      inputRange: [0, scrollDistance],\r\n      outputRange: [0, 100],\r\n      extrapolate: 'clamp',\r\n    });\r\n\r\n    const titleScale = this.state.scrollY.interpolate({\r\n      inputRange: [0, scrollDistance / 2, scrollDistance],\r\n      outputRange: [1, 1, 0.8],\r\n      extrapolate: 'clamp',\r\n    });\r\n    const titleTranslate = this.state.scrollY.interpolate({\r\n      inputRange: [0, scrollDistance / 2, scrollDistance],\r\n      outputRange: [0, 0, -8],\r\n      extrapolate: 'clamp',\r\n    });\r\n\r\n    return (\r\n      <View style={styles.fill}>\r\n        \r\n        <Animated.ScrollView\r\n          style={styles.fill}\r\n          scrollEventThrottle={1}\r\n          onScroll={Animated.event(\r\n            [{ nativeEvent: { contentOffset: { y: this.state.scrollY } } }],\r\n            { useNativeDriver: true },\r\n          )}>\r\n          <View style={{marginTop: toolbarMaxHeight, minHeight: 700}}>\r\n            {children}\r\n          </View>\r\n        </Animated.ScrollView>\r\n        <Animated.View\r\n          style={[\r\n            styles.header,\r\n            { \r\n              backgroundColor: toolbarColor,\r\n              height: toolbarMaxHeight,\r\n              transform: [{ translateY: headerTranslate }] \r\n            },\r\n          ]}\r\n        >\r\n          <Animated.Image\r\n            style={[\r\n              styles.backgroundImage,\r\n              {\r\n                height: toolbarMaxHeight,\r\n                opacity: imageOpacity,\r\n                transform: [{ translateY: imageTranslate }],\r\n              },\r\n            ]}\r\n            source={src}\r\n          />\r\n          <Animated.View\r\n            style={[\r\n              styles.action,\r\n              {\r\n                backgroundColor: 'transparent',\r\n                transform: [\r\n                  { scale: titleScale },\r\n                ],\r\n              },\r\n            ]}\r\n          >\r\n            <Text style={[styles.title,{color: titleColor}]}>{title}</Text>\r\n          </Animated.View>\r\n        </Animated.View>\r\n        <Animated.View style={styles.bar}>\r\n          <TouchableOpacity onPress={leftItemPress}>\r\n            <View style={styles.left}>{leftItem}</View>\r\n          </TouchableOpacity>\r\n          <TouchableOpacity onPress={rightItemPress}>\r\n            <View style={styles.right}>{rightItem}</View>\r\n          </TouchableOpacity>\r\n        </Animated.View>\r\n\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nCollapsingToolbar.propTypes = propTypes;\r\nCollapsingToolbar.defaultProps = defaultProps;\r\nexport default CollapsingToolbar;"]},"metadata":{},"sourceType":"module"}