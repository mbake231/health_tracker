{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var API = function (_Component) {\n  _inherits(API, _Component);\n\n  var _super = _createSuper(API);\n\n  function API() {\n    _classCallCheck(this, API);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(API, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxs(\"div\", {\n        children: [\"home\", _jsx(Calendar, {\n          minDate: '2012-05-10',\n          maxDate: '2012-05-30',\n          onDayPress: function onDayPress(day) {\n            console.log('selected day', day);\n          },\n          onDayLongPress: function onDayLongPress(day) {\n            console.log('selected day', day);\n          },\n          monthFormat: 'yyyy MM',\n          onMonthChange: function onMonthChange(month) {\n            console.log('month changed', month);\n          },\n          hideArrows: true,\n          renderArrow: function renderArrow(direction) {\n            return _jsx(Arrow, {});\n          },\n          hideExtraDays: true,\n          disableMonthChange: true,\n          firstDay: 1,\n          hideDayNames: true,\n          showWeekNumbers: true,\n          onPressArrowLeft: function onPressArrowLeft(subtractMonth) {\n            return subtractMonth();\n          },\n          onPressArrowRight: function onPressArrowRight(addMonth) {\n            return addMonth();\n          },\n          disableArrowLeft: true,\n          disableArrowRight: true,\n          disableAllTouchEventsForDisabledDays: true,\n          renderHeader: function renderHeader(date) {},\n          enableSwipeMonths: true\n        })]\n      });\n    }\n  }]);\n\n  return API;\n}(Component);\nexport default API;","map":{"version":3,"sources":["/Users/mikebaker/health_tracker/client/containers/Home.jsx"],"names":["React","Component","axios","Calendar","CalendarList","Agenda","API","day","console","log","month","direction","subtractMonth","addMonth","date"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,MAAhC,QAA6C,wBAA7C;;;AAIA,WAAaC,GAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,6BAAoB,CAGnB;AAPH;AAAA;AAAA,WAUE,kBAAS;AACP,aAAQ;AAAA,2BAEN,KAAC,QAAD;AAIJ,UAAA,OAAO,EAAE,YAJL;AAMJ,UAAA,OAAO,EAAE,YANL;AAQJ,UAAA,UAAU,EAAE,oBAAAC,GAAG,EAAI;AACjBC,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACD,WAVG;AAYJ,UAAA,cAAc,EAAE,wBAAAA,GAAG,EAAI;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACD,WAdG;AAgBJ,UAAA,WAAW,EAAE,SAhBT;AAkBJ,UAAA,aAAa,EAAE,uBAAAG,KAAK,EAAI;AACtBF,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,KAA7B;AACD,WApBG;AAsBJ,UAAA,UAAU,EAAE,IAtBR;AAwBJ,UAAA,WAAW,EAAE,qBAAAC,SAAS;AAAA,mBAAI,KAAC,KAAD,KAAJ;AAAA,WAxBlB;AA0BJ,UAAA,aAAa,EAAE,IA1BX;AA6BJ,UAAA,kBAAkB,EAAE,IA7BhB;AA+BJ,UAAA,QAAQ,EAAE,CA/BN;AAiCJ,UAAA,YAAY,EAAE,IAjCV;AAmCJ,UAAA,eAAe,EAAE,IAnCb;AAqCJ,UAAA,gBAAgB,EAAE,0BAAAC,aAAa;AAAA,mBAAIA,aAAa,EAAjB;AAAA,WArC3B;AAuCJ,UAAA,iBAAiB,EAAE,2BAAAC,QAAQ;AAAA,mBAAIA,QAAQ,EAAZ;AAAA,WAvCvB;AAyCJ,UAAA,gBAAgB,EAAE,IAzCd;AA2CJ,UAAA,iBAAiB,EAAE,IA3Cf;AA6CJ,UAAA,oCAAoC,EAAE,IA7ClC;AA+CJ,UAAA,YAAY,EAAE,sBAAAC,IAAI,EAAI,CAErB,CAjDG;AAmDJ,UAAA,iBAAiB,EAAE;AAnDf,UAFM;AAAA,QAAR;AA0DD;AArEH;;AAAA;AAAA,EAAyBb,SAAzB;AAuEA,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Calendar, CalendarList, Agenda} from 'react-native-calendars';\n\n\n\nexport class API extends Component {\n\n\n\n  componentDidMount() {\n\n      \n  }\n\n\n  render() {\n    return (<div>\n      home\n      <Calendar\n  // Initially visible month. Default = now\n \n  // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\n  minDate={'2012-05-10'}\n  // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\n  maxDate={'2012-05-30'}\n  // Handler which gets executed on day press. Default = undefined\n  onDayPress={day => {\n    console.log('selected day', day);\n  }}\n  // Handler which gets executed on day long press. Default = undefined\n  onDayLongPress={day => {\n    console.log('selected day', day);\n  }}\n  // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\n  monthFormat={'yyyy MM'}\n  // Handler which gets executed when visible month changes in calendar. Default = undefined\n  onMonthChange={month => {\n    console.log('month changed', month);\n  }}\n  // Hide month navigation arrows. Default = false\n  hideArrows={true}\n  // Replace default arrows with custom ones (direction can be 'left' or 'right')\n  renderArrow={direction => <Arrow />}\n  // Do not show days of other months in month page. Default = false\n  hideExtraDays={true}\n  // If hideArrows = false and hideExtraDays = false do not switch month when tapping on greyed out\n  // day from another month that is visible in calendar page. Default = false\n  disableMonthChange={true}\n  // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday\n  firstDay={1}\n  // Hide day names. Default = false\n  hideDayNames={true}\n  // Show week numbers to the left. Default = false\n  showWeekNumbers={true}\n  // Handler which gets executed when press arrow icon left. It receive a callback can go back month\n  onPressArrowLeft={subtractMonth => subtractMonth()}\n  // Handler which gets executed when press arrow icon right. It receive a callback can go next month\n  onPressArrowRight={addMonth => addMonth()}\n  // Disable left arrow. Default = false\n  disableArrowLeft={true}\n  // Disable right arrow. Default = false\n  disableArrowRight={true}\n  // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\n  disableAllTouchEventsForDisabledDays={true}\n  // Replace default month and year title with custom one. the function receive a date as parameter\n  renderHeader={date => {\n    /*Return JSX*/\n  }}\n  // Enable the option to swipe between months. Default = false\n  enableSwipeMonths={true}\n/>\n    </div>\n\n    );\n  }\n}\nexport default API"]},"metadata":{},"sourceType":"module"}